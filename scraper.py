from playwright.sync_api import sync_playwright
import pandas as pd
import re

URL = "https://www.zara.com/ca/fr/homme-tout-l7465.html"

def scrape_zara_products(url):
    with sync_playwright() as p:
        print("üöÄ Lancement du navigateur...")

        browser = p.chromium.launch(
            headless=False,
            args=['--disable-blink-features=AutomationControlled']
        )

        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            locale='fr-CA'
        )

        page = context.new_page()
        page.add_init_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined});")

        print("üìÑ Chargement de la page...")
        page.goto(url, wait_until="domcontentloaded", timeout=60000)
        print("   ‚úì Page charg√©e")

        page.wait_for_timeout(4000)

        # Accepter cookies
        try:
            cookie_btn = page.query_selector("button#onetrust-accept-btn-handler")
            if cookie_btn:
                cookie_btn.click()
                print("   ‚úì Cookies accept√©s")
                page.wait_for_timeout(2000)
        except:
            pass

        # --- Infinite Scroll ---
        print("üìú D√©but du scroll infini...")

        previous_height = 0
        same_count = 0
        max_same = 6
        max_scrolls = 150

        for i in range(max_scrolls):
            page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            page.wait_for_timeout(2500)

            current_height = page.evaluate("document.body.scrollHeight")
            current_count = len(page.query_selector_all("li.product-grid-product"))
            print(f"   Scroll {i+1}: {current_count} produits d√©tect√©s...")

            if current_height == previous_height:
                same_count += 1
                if same_count >= max_same:
                    print("üìç Aucun nouveau contenu d√©tect√© apr√®s plusieurs tentatives ‚Äî arr√™t du scroll.")
                    break
            else:
                same_count = 0

            previous_height = current_height

        print("‚úÖ Scroll infini termin√© ‚Äî tous les produits devraient √™tre charg√©s.")
        page.wait_for_timeout(3000)

        # --- Extraction des produits ---
        products = []
        product_items = page.query_selector_all("li.product-grid-product")
        print(f"   Trouv√© {len(product_items)} produits dans la grille.")

        for idx, item in enumerate(product_items):
            try:
                product = {}

                # Lien principal
                links = item.query_selector_all("a")
                main_link = None
                for link in links:
                    href = link.get_attribute("href")
                    if href and ('/p' in href or 'product' in href.lower()):
                        main_link = link
                        break
                if not main_link and links:
                    main_link = links[0]

                if main_link:
                    href = main_link.get_attribute("href")
                    product["lien"] = f"https://www.zara.com{href}" if href and href.startswith('/') else href
                else:
                    product["lien"] = ""

                # Titre
                titre = ""
                text_elements = item.query_selector_all("h2, h3, h4, p, span, div")
                for elem in text_elements:
                    text = elem.inner_text().strip()
                    if text and 5 < len(text) < 150 and not text.replace(' ', '').isdigit():
                        if not re.match(r'^[\d\s,.$CAD‚Ç¨]+$', text):
                            if not titre or len(text) > len(titre):
                                titre = text
                product["titre"] = titre

                # Prix
                prix = ""
                price_elements = item.query_selector_all("[class*='price'], [class*='money'], .price-current, span, p")
                for elem in price_elements:
                    text = elem.inner_text().strip()
                    if re.search(r'(\$|CAD|‚Ç¨)\s*\d+', text):
                        prix = text
                        break
                product["prix"] = prix

                # Image
                img = item.query_selector("img")
                if img:
                    img_src = (
                        img.get_attribute("src")
                        or img.get_attribute("data-src")
                        or img.get_attribute("data-lazy-src")
                        or ""
                    )
                    product["image"] = img_src
                else:
                    product["image"] = ""

                # ID produit
                product["id"] = item.get_attribute("data-productid") or item.get_attribute("id") or ""

                if product["titre"] or product["lien"]:
                    products.append(product)
                    if idx < 3:
                        print(f"\n   Produit {idx+1}:")
                        print(f"      Titre: {product['titre'][:50]}...")
                        print(f"      Prix: {product['prix']}")
                        print(f"      Lien: {product['lien'][:60]}...")

            except Exception as e:
                print(f"‚ö†Ô∏è Erreur sur le produit {idx}: {e}")
                continue

        print(f"\n   ‚úì {len(products)} produits extraits avant nettoyage")

        # Screenshot de s√©curit√©
        try:
            page.screenshot(path="zara_final.png", full_page=False)
            print("   üì∏ Screenshot captur√© (vue visible seulement)")
        except Exception as e:
            print(f"‚ö†Ô∏è Screenshot non captur√© : {e}")

        browser.close()
        return products


def main():
    print("=" * 70)
    print("üõçÔ∏è  SCRAPER ZARA - VERSION COMPL√àTE (TOUS LES PRODUITS)")
    print("=" * 70)

    try:
        products = scrape_zara_products(URL)

        if not products:
            print("\n‚ùå Aucun produit trouv√©")
            return

        df = pd.DataFrame(products)
        df = df[df['titre'].str.len() > 3]
        df = df.drop_duplicates(subset=['titre'], keep='first')

        filename = "zara_homme_complet.csv"
        df.to_csv(filename, index=False, encoding="utf-8")

        print(f"\n‚úÖ {len(df)} produits export√©s: {filename}")
        print("\nüìã APER√áU DES PRODUITS:")
        print("=" * 70)
        for idx, row in df.head(10).iterrows():
            print(f"\n{idx+1}. {row['titre']}")
            if row.get('prix'):
                print(f"   üí∞ {row['prix']}")
            if row.get('lien'):
                print(f"   üîó {row['lien'][:65]}...")

        print("\n" + "=" * 70)
        print("üìä STATISTIQUES:")
        print(f"   Total: {len(df)} produits")
        print(f"   Avec prix: {df['prix'].astype(bool).sum()}")
        print(f"   Avec image: {df['image'].astype(bool).sum()}")
        print(f"   Avec lien: {df['lien'].astype(bool).sum()}")

    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
